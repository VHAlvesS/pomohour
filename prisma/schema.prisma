// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id @default(uuid()) @map("_id")
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  settings        Settings?
  pomodoroSession pomodoroSession?
  // Optional for WebAuthn support
  Authenticator   Authenticator[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Task            Task[]
}

model Account {
  id                String   @id @default(uuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(uuid()) @map("_id")
  identifier String
  token      String
  expires    DateTime
  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, credentialID])
}

model Settings {
  id           String   @id @default(uuid()) @map("_id")
  userId       String   @unique
  alarmRepeat  Int
  alarmSound   String
  longBreak    Int
  longInterval Int
  shortBreak   Int
  timer        Int
  alarmVolume  Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model pomodoroSession {
  id          String   @id @default(uuid()) @map("_id")
  userId      String   @unique
  currentTask String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id                String   @id @default(uuid()) @map("_id")
  userId            String
  title             String
  todos             Json
  finishedPomodoros Int
  totalPomodoros    Int
  order             Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
